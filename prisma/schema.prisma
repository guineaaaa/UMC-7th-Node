// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model FoodCategory {
  id    BigInt @id @default(autoincrement())
  name  String @db.VarChar(15)
  
  userFavorCategories MemberPrefer[]
  stores Store[] // 수정: Store와의 관계 추가

  @@map("food_category")
}

model Member {
  id            BigInt @id @default(autoincrement())
  name          String @db.VarChar(20)
  gender        String @db.VarChar(10)
  age           Int      
  address       String @db.VarChar(40)
  spec_address  String @db.VarChar(40)
  phone_num     String @db.VarChar(15)
  // status        String @db.VarChar(15)
  // inactive_date DateTime @db.Date
  // social_type   String @db.VarChar(10)
  created_at    DateTime @default(now()) @db.DateTime(6)
  updated_at    DateTime @default(now()) @updatedAt @db.DateTime(6)
  email         String @db.VarChar(50)
  // point         Int
  birth         String @db.VarChar(15)

  userFavorCategories MemberPrefer[]
  memberMissions MemberMission[]
  reviews Review[]

  @@map("member")
}

model MemberMission {
  id         BigInt @id @default(autoincrement())
  member     Member @relation(fields: [memberId], references: [id])
  memberId   BigInt @map("member_id")
  mission    Mission @relation(fields: [missionId], references: [id])
  missionId  BigInt @map("mission_id")
  status     String @db.VarChar(15)
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(6)

  store      Store@relation(fields:[storeId], references:[id])
  storeId    BigInt @map("store_id")

  @@map("member_mission")
}

model MemberPrefer {
  id             BigInt @id @default(autoincrement())
  member         Member @relation(fields: [memberId], references: [id])
  memberId       BigInt @map("member_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId BigInt @map("category_id")
  created_at     DateTime @default(now()) @db.DateTime(6)
  updated_at     DateTime @default(now()) @updatedAt @db.DateTime(6)

  @@map("member_prefer")
}

model Mission {
  id          BigInt @id @default(autoincrement())
  store       Store @relation(fields: [storeId], references: [id])
  storeId     BigInt @map("store_id")
  reward      Int
  deadline    DateTime
  mission_spec String @db.Text
  created_at  DateTime @default(now()) @db.DateTime(6)
  updated_at  DateTime @default(now()) @updatedAt @db.DateTime(6)

  memberMissions MemberMission[] // 수정: MemberMission과의 관계 추가

  @@map("mission")
}

model Region {
  id        BigInt @id @default(autoincrement())
  name      String @db.VarChar(20)
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(6)

  stores Store[] // 수정: Store와의 관계 추가

  @@map("region")
}

model Review {
  id        BigInt @id @default(autoincrement())
  member    Member @relation(fields: [memberId], references: [id])
  memberId  BigInt @map("member_id")
  store     Store @relation(fields: [storeId], references: [id])
  storeId   BigInt @map("store_id")
  body      String @db.Text
  score     Float
  created_at DateTime @default(now()) @db.DateTime(6)

  @@map("review")
}

model Store {
  id         BigInt @id @default(autoincrement())
  region     Region @relation(fields: [regionId], references: [id])
  regionId   BigInt @map("region_id")
  name       String @db.VarChar(50)
  address    String @db.VarChar(50)
  score      Float
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @updatedAt @db.DateTime(6)

  memberMissions MemberMission[] 
  reviews Review[]
  missions Mission[] 
  foodCategories FoodCategory[]

  @@map("store")
}
